import speech_recognition as sr
import pyttsx3 
import webbrowser
from datetime import datetime
import os
from time import sleep, time
import re
import requests
import random
from plyer import notification
import threading
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL

devices = AudioUtilities.GetSpeakers()
interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
volume = cast(interface, POINTER(IAudioEndpointVolume))

engine = pyttsx3.init()
rate = engine.getProperty('rate')
engine.setProperty('rate', rate + 40)

def falar(texto):
    engine.say(texto)
    engine.runAndWait()


def ouvir():
    reconhecedor = sr.Recognizer()
    with sr.Microphone() as source:
        reconhecedor.adjust_for_ambient_noise(source, duration=1)
        print("Ouvindo...")

        try:
            audio = reconhecedor.listen(source, timeout=5, phrase_time_limit=6)
            texto = reconhecedor.recognize_google(audio, language='pt-BR').lower()
            texto = texto.lower()
            print(f"Voc√™ disse: {texto}")
            return texto.lower()
        except sr.UnknownValueError:
            print("N√£o entendi.")
        except sr.WaitTimeoutError:
            print("Tempo esgotado.")
        except sr.RequestError:
            print("Erro ao acessar servi√ßo de reconhecimento.")
        return ""

executado = ""

def aumentarVelocidade():
    rate = engine.getProperty('rate')

    # Aumenta a velocidade (por exemplo, para 250 palavras por minuto)
    engine.setProperty('rate', rate + 50)
    falar("Agora eu falo mais r√°pido, o que achou?")

def diminuirVelocidade():
    rate = engine.getProperty('rate')

    # Aumenta a velocidade (por exemplo, para 250 palavras por minuto)
    engine.setProperty('rate', rate - 50)
    falar("Agora eu falo menos r√°pido, o que achou?")

def horas():
    #horas
    agora = datetime.now().strftime("%H:%M")
    falar(f"Agora s√£o {agora}")
    executado = True

def aumentarVolume(passo=0.1):

    volume_atual = volume.GetMasterVolumeLevelScalar()  # valor entre 0.0 e 1.0
    novo_volume = min(volume_atual + passo, 1.0)  # m√°ximo 1.0
    volume.SetMasterVolumeLevelScalar(novo_volume, None)

    print(f"Volume aumentado para: {int(novo_volume * 100)}%")
    falar(f"Volume aumentado para: {int(novo_volume * 100)}%")

def diminuirVolume(passo=0.1):

    volume_atual = volume.GetMasterVolumeLevelScalar()  # valor entre 0.0 e 1.0
    novo_volume = min(volume_atual - passo, 1.0)  # m√°ximo 1.0
    volume.SetMasterVolumeLevelScalar(novo_volume, None)

    print(f"Volume diminuido para: {int(novo_volume * 100)}%")
    falar(f"Volume diminuido para: {int(novo_volume * 100)}%")

def alternar_mudo():

    estado_atual = volume.GetMute()
    volume.SetMute(not estado_atual, None)

    if not estado_atual:
        print("üîá Som mutado.")
        falar("Som mutado")
    else:
        print("üîä Som desmutado.")
        falar("Som desmutado")

def ver_dia_da_semana():
    dias = ["segunda-feira", "ter√ßa-feira", "quarta-feira", "quinta-feira", "sexta-feira", "s√°bado", "domingo"]
    hoje = datetime.now()
    dia_da_semana = dias[hoje.weekday()]  # weekday() retorna 0 (segunda) at√© 6 (domingo)
    return dia_da_semana

def hoje():
    # Data de Hoje
    data_atual = datetime.now().strftime("%d/%m/%y")  # Renomeando a vari√°vel
    falar(f"Hoje √© {data_atual}, {ver_dia_da_semana()}")  # Usando a nova vari√°vel
    executado = True

def abrirGPT():
    #GPT
    webbrowser.open("https://chatgpt.com/")
    falar("Abrindo o GPT")
    executado = True

def tocarLofi():
    #Tocar lofi
    webbrowser.open("https://www.youtube.com/watch?v=28KRPhVzCus&autoplay=1")
    falar("Tocando m√∫sica relaxante!")
    executado = True

API_KEY_CLIMA = "b1c447602ac1733630ac465ec871d141"
cityname = "bras√≠lia" #pi√ßarras, joinville, rio de janeiro, s√£o paulo
linkClima = f"https://api.openweathermap.org/data/2.5/weather?q={cityname}&appid={API_KEY_CLIMA}"

def clima():
    requisicao = requests.get(linkClima) 
    requisicao_dic = requisicao.json()

    tempo = requisicao_dic["weather"][0]["main"]

    sensacao = requisicao_dic["main"]["feels_like"]
    sensacao = sensacao - 273.15

    max_temperatura = requisicao_dic["main"]["temp_max"]
    max_temperatura = max_temperatura - 273.15

    min_temperatura = requisicao_dic["main"]["temp_min"]
    min_temperatura = min_temperatura - 273.15

    umidade = requisicao_dic["main"]["humidity"]


    fala = f"O tempo em {cityname} √©: descri√ß√£o: {tempo},\nsensa√ß√£o t√©rmica: {sensacao:.1f} graus\na temperatura m√°xima ser√° de: {max_temperatura:.1f} graus c√©lsius,\ne a m√≠nima de : {min_temperatura:.1f} graus,\na umidade est√° em: {umidade}%".replace(".", ",")

    falar(fala)

def cronometro():
    #cronometro
    falar("Iniciando o cron√¥metro, diga 'parar' para parar")
    inicio = time()

    while True: 
        comando = input("Digite 'parar' para parar: ")

        if "pare" in comando or "parar" in comando:

            fim = time()
            tempo = fim - inicio
            tempo_formatado = f"{tempo:.0f}"

            falar(f"Foram {tempo_formatado} segundos")
            break
    executado = True

def lembrete(comando):
    #lembrete
    numeros = re.findall(r"\d+(?:\.\d+)?", comando)

    falar("Para que √© o lembrete?")
    mensagem = ouvir()

    if numeros:

        minutos = float(numeros[0])
        segundos = minutos * 60

        falar(f"Ok, vou te lembrar em {minutos:.1f} minutos!")

        def lembrar():
            sleep(segundos / 2)
            notification.notify(
                title="‚è∞ Lembrete do Assistente",
                message=f"J√° passou metade do tempo para: {mensagem}",
                timeout=10
            )
            
            sleep(segundos / 2)
            notification.notify(
                title="‚è∞ Lembrete do Assistente",
                message=f"Seu lembrete para: {mensagem}",
                timeout=10
            )
            falar("Hora de", mensagem)

    else: 

        falar("Um lembrete para daqui a quantos minutos?")

        minutos = float(input(">> "))
        segundos = minutos * 60

        falar(f"Ok, vou te lembrar em {minutos:.1f} minutos!")

        def lembrar():
            sleep(segundos / 2)
            notification.notify(
                title="‚è∞ Lembrete do Assistente",
                message=f"J√° passou metade do tempo para: {mensagem}",
                timeout=10
            )
            
            sleep(segundos / 2)
            notification.notify(
                title="‚è∞ Lembrete do Assistente",
                message=f"Seu lembrete para: {mensagem}",
                timeout=10
            )
            falar("Hora de", mensagem)
    
        executado = True

    # Cria e inicia a thread
    thread = threading.Thread(target=lembrar)
    thread.start()

def obrigado():
    #Obrigado
    falar("De nada, voc√™ √© brabo!")
    executado = True

moeda = ["cara", "coroa"]
def jogarMoeda():

    falar("Vamos jogar cara ou coroa, voc√™ escolhe!")

    escolha = input("Digite a sua escolha ['cara' ou 'coroa']: ")
    
    jogada = random.choice(moeda)

    if escolha == jogada:
        falar(f"Caiu {jogada}, voc√™ ganhou!")

    else:
        falar(f"Caiu {jogada}, voc√™ perdeu!")


def naoEntendi():
    #Se n√£o reconhecer
    if not executado:
        falar("Desculpe, n√£o entendi o comando.")
